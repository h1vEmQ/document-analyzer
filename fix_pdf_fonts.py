#!/usr/bin/env python
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —à—Ä–∏—Ñ—Ç–∞–º–∏ –≤ PDF –æ—Ç—á–µ—Ç–∞—Ö
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'wara_project.settings')
django.setup()

from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Table, TableStyle, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.units import inch
from io import BytesIO

def register_russian_fonts():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
    
    print("üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
    font_paths = [
        # macOS
        "/System/Library/Fonts/Helvetica.ttc",
        "/System/Library/Fonts/Arial.ttf",
        "/Library/Fonts/Arial.ttf",
        "/System/Library/Fonts/Supplemental/Arial.ttf",
        # Windows (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ Windows)
        "C:/Windows/Fonts/arial.ttf",
        "C:/Windows/Fonts/calibri.ttf",
        # Linux
        "/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf",
        "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"
    ]
    
    registered_fonts = []
    
    for font_path in font_paths:
        if os.path.exists(font_path):
            try:
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç
                pdfmetrics.registerFont(TTFont('RussianFont', font_path))
                registered_fonts.append(('RussianFont', font_path))
                print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —à—Ä–∏—Ñ—Ç: {font_path}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∂–∏—Ä–Ω—É—é –≤–µ—Ä—Å–∏—é
                bold_path = font_path.replace('.ttf', '-Bold.ttf').replace('.ttc', '-Bold.ttf')
                if os.path.exists(bold_path):
                    pdfmetrics.registerFont(TTFont('RussianFont-Bold', bold_path))
                    registered_fonts.append(('RussianFont-Bold', bold_path))
                    print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç: {bold_path}")
                
                return registered_fonts
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {font_path}: {e}")
                continue
    
    print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ")
    return []

def create_russian_styles():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    
    styles = getSampleStyleSheet()
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    russian_style = ParagraphStyle(
        'RussianText',
        parent=styles['Normal'],
        fontName='RussianFont' if 'RussianFont' in pdfmetrics.getRegisteredFontNames() else 'Helvetica',
        fontSize=10,
        leading=12
    )
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    russian_title = ParagraphStyle(
        'RussianTitle',
        parent=styles['Title'],
        fontName='RussianFont-Bold' if 'RussianFont-Bold' in pdfmetrics.getRegisteredFontNames() else 'Helvetica-Bold',
        fontSize=16,
        leading=20,
        spaceAfter=20,
        alignment=1  # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
    )
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    russian_heading = ParagraphStyle(
        'RussianHeading',
        parent=styles['Heading2'],
        fontName='RussianFont-Bold' if 'RussianFont-Bold' in pdfmetrics.getRegisteredFontNames() else 'Helvetica-Bold',
        fontSize=14,
        leading=16,
        spaceAfter=12
    )
    
    return russian_style, russian_title, russian_heading

def generate_test_pdf():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º"""
    
    print("\nüìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã
    registered_fonts = register_russian_fonts()
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏
    russian_style, russian_title, russian_heading = create_russian_styles()
    
    # –°–æ–∑–¥–∞–µ–º PDF
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    story = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    title = Paragraph("–û—Ç—á–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", russian_title)
    story.append(title)
    story.append(Spacer(1, 20))
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    info_text = """
    <b>–ë–∞–∑–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç:</b> –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç 1<br/>
    <b>–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º—ã–π –¥–æ–∫—É–º–µ–Ω—Ç:</b> –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç 2<br/>
    <b>–î–∞—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:</b> 04.10.2025 08:20<br/>
    <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> admin
    """
    info = Paragraph(info_text, russian_style)
    story.append(info)
    story.append(Spacer(1, 20))
    
    # –°–≤–æ–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    summary_title = Paragraph("–°–≤–æ–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π", russian_heading)
    story.append(summary_title)
    story.append(Spacer(1, 10))
    
    # –¢–∞–±–ª–∏—Ü–∞
    table_data = [
        ['–¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'],
        ['–í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π', '16'],
        ['–î–æ–±–∞–≤–ª–µ–Ω–æ', '0'],
        ['–£–¥–∞–ª–µ–Ω–æ', '10'],
        ['–ò–∑–º–µ–Ω–µ–Ω–æ', '6']
    ]
    
    table = Table(table_data, colWidths=[3*inch, 1.5*inch])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à—Ä–∏—Ñ—Ç—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    if 'RussianFont' in pdfmetrics.getRegisteredFontNames():
        header_font = 'RussianFont-Bold' if 'RussianFont-Bold' in pdfmetrics.getRegisteredFontNames() else 'RussianFont'
        body_font = 'RussianFont'
    else:
        header_font = 'Helvetica-Bold'
        body_font = 'Helvetica'
    
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), header_font),
        ('FONTSIZE', (0, 0), (-1, 0), 10),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('FONTNAME', (0, 1), (-1, -1), body_font),
        ('FONTSIZE', (0, 1), (-1, -1), 10),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(table)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
    doc.build(story)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    pdf_data = buffer.getvalue()
    buffer.close()
    
    print(f"‚úÖ PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìè –†–∞–∑–º–µ—Ä: {len(pdf_data)} –±–∞–π—Ç")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    output_path = '/Users/wind/Documents/WARA/test_russian_fixed.pdf'
    with open(output_path, 'wb') as f:
        f.write(pdf_data)
    
    print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    test_words = [
        '–û—Ç—á–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
        '–ë–∞–∑–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç',
        '–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º—ã–π –¥–æ–∫—É–º–µ–Ω—Ç',
        '–°–≤–æ–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π',
        '–í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π',
        '–î–æ–±–∞–≤–ª–µ–Ω–æ',
        '–£–¥–∞–ª–µ–Ω–æ',
        '–ò–∑–º–µ–Ω–µ–Ω–æ'
    ]
    
    found_words = 0
    for word in test_words:
        if word.encode('utf-8') in pdf_data:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: '{word}'")
            found_words += 1
        else:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: '{word}'")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤: {found_words} –∏–∑ {len(test_words)}")
    print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(found_words/len(test_words)*100):.1f}%")
    
    if found_words >= len(test_words) * 0.8:
        print(f"üéâ –û–¢–õ–ò–ß–ù–û! –ü—Ä–æ–±–ª–µ–º–∞ —Å —à—Ä–∏—Ñ—Ç–∞–º–∏ —Ä–µ—à–µ–Ω–∞!")
    elif found_words >= len(test_words) * 0.5:
        print(f"‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û: –ë–æ–ª—å—à–∞—è —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print(f"‚ùå –ü–†–û–ë–õ–ï–ú–ê: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")

if __name__ == '__main__':
    generate_test_pdf()
