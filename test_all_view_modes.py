#!/usr/bin/env python
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ WARA
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'wara_project.settings')
django.setup()

from django.test import Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from documents.models import Document as DjangoDocument
from analysis.models import Comparison
from reports.models import Report
from django.core.files.uploadedfile import SimpleUploadedFile

User = get_user_model()

def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, created = User.objects.get_or_create(
        username='testuser',
        defaults={
            'email': 'test@example.com',
            'first_name': '–¢–µ—Å—Ç',
            'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'role': 'user'
        }
    )
    if created:
        user.set_password('testpass123')
        user.save()
        print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
    else:
        print(f"    ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    doc_count = 3
    for i in range(doc_count):
        doc, created = DjangoDocument.objects.get_or_create(
            title=f'–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç {i+1}',
            user=user,
            defaults={
                'filename': f'test_doc_{i+1}.docx',
                'content_text': f'–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {i+1}',
                'status': 'processed',
                'file_size': 1024 * (i + 1)  # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
            }
        )
        if created:
            print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {doc.title}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    documents = list(DjangoDocument.objects.filter(user=user)[:2])
    if len(documents) >= 2:
        comparison, created = Comparison.objects.get_or_create(
            title='–¢–µ—Å—Ç–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ',
            user=user,
            base_document=documents[0],
            compared_document=documents[1],
            defaults={
                'status': 'completed',
                'changes_summary': {'total': 5, 'added': 3, 'removed': 2}
            }
        )
        if created:
            print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: {comparison.title}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã
    if 'comparison' in locals():
        report, created = Report.objects.get_or_create(
            title='–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç',
            user=user,
            comparison=comparison,
            defaults={
                'format': 'pdf',
                'status': 'ready'
            }
        )
        if created:
            print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç: {report.title}")
    
    return user

def test_documents_view_modes(client, user):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 50)
    
    # –õ–æ–≥–∏–Ω–∏–º—Å—è
    client.force_login(user)
    
    # –¢–µ—Å—Ç 1: –ö–∞—Ä—Ç–æ—á–Ω—ã–π —Ä–µ–∂–∏–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    print("\nüìÑ –¢–µ—Å—Ç 1: –ö–∞—Ä—Ç–æ—á–Ω—ã–π —Ä–µ–∂–∏–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    response = client.get(reverse('documents:list'))
    if response.status_code == 200:
        print("    ‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: 200")
        if hasattr(response, 'context') and response.context:
            print(f"    üìù –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {response.context.get('view_mode', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
        assert '–ö–∞—Ä—Ç–æ—á–∫–∏' in response.content.decode()
        assert '–¢–∞–±–ª–∏—Ü–∞' in response.content.decode()
        print("    ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Ä–µ–∂–∏–º–æ–≤ –Ω–∞–π–¥–µ–Ω—ã")
        assert 'document_list.html' in str(response.template_name)
        print("    ‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω")
    else:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    
    # –¢–µ—Å—Ç 2: –¢–∞–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º
    print("\nüìã –¢–µ—Å—Ç 2: –¢–∞–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º")
    response = client.get(reverse('documents:list') + '?view_mode=table')
    if response.status_code == 200:
        print("    ‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: 200")
        if hasattr(response, 'context') and response.context:
            print(f"    üìù –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {response.context.get('view_mode', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
        assert 'table table-hover' in response.content.decode()
        print("    ‚úÖ –¢–∞–±–ª–∏—á–Ω—ã–π –º–∞–∫–µ—Ç –Ω–∞–π–¥–µ–Ω")
        assert 'fas fa-hashtag' in response.content.decode()
        print("    ‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")

def test_analysis_view_modes(client, user):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\nüîç –¢–µ—Å—Ç —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ö–∞—Ä—Ç–æ—á–Ω—ã–π —Ä–µ–∂–∏–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    print("\nüìÑ –¢–µ—Å—Ç 1: –ö–∞—Ä—Ç–æ—á–Ω—ã–π —Ä–µ–∂–∏–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    response = client.get(reverse('analysis:list'))
    if response.status_code == 200:
        print("    ‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: 200")
        if hasattr(response, 'context') and response.context:
            print(f"    üìù –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {response.context.get('view_mode', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
        assert '–ö–∞—Ä—Ç–æ—á–∫–∏' in response.content.decode()
        assert '–¢–∞–±–ª–∏—Ü–∞' in response.content.decode()
        print("    ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Ä–µ–∂–∏–º–æ–≤ –Ω–∞–π–¥–µ–Ω—ã")
        assert 'comparison_list.html' in str(response.template_name)
        print("    ‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω")
    else:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    
    # –¢–µ—Å—Ç 2: –¢–∞–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º
    print("\nüìã –¢–µ—Å—Ç 2: –¢–∞–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º")
    response = client.get(reverse('analysis:list') + '?view_mode=table')
    if response.status_code == 200:
        print("    ‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: 200")
        if hasattr(response, 'context') and response.context:
            print(f"    üìù –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {response.context.get('view_mode', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
        assert 'table table-hover' in response.content.decode()
        print("    ‚úÖ –¢–∞–±–ª–∏—á–Ω—ã–π –º–∞–∫–µ—Ç –Ω–∞–π–¥–µ–Ω")
        assert 'fas fa-balance-scale' in response.content.decode()
        print("    ‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")

def test_reports_view_modes(client, user):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ö–∞—Ä—Ç–æ—á–Ω—ã–π —Ä–µ–∂–∏–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    print("\nüìÑ –¢–µ—Å—Ç 1: –ö–∞—Ä—Ç–æ—á–Ω—ã–π —Ä–µ–∂–∏–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    response = client.get(reverse('reports:list'))
    if response.status_code == 200:
        print("    ‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: 200")
        if hasattr(response, 'context') and response.context:
            print(f"    üìù –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {response.context.get('view_mode', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
        assert '–ö–∞—Ä—Ç–æ—á–∫–∏' in response.content.decode()
        assert '–¢–∞–±–ª–∏—Ü–∞' in response.content.decode()
        print("    ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Ä–µ–∂–∏–º–æ–≤ –Ω–∞–π–¥–µ–Ω—ã")
        assert 'report_list.html' in str(response.template_name)
        print("    ‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω")
    else:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    
    # –¢–µ—Å—Ç 2: –¢–∞–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º
    print("\nüìã –¢–µ—Å—Ç 2: –¢–∞–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º")
    response = client.get(reverse('reports:list') + '?view_mode=table')
    if response.status_code == 200:
        print("    ‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: 200")
        if hasattr(response, 'context') and response.context:
            print(f"    üìù –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {response.context.get('view_mode', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
        assert 'table table-hover' in response.content.decode()
        print("    ‚úÖ –¢–∞–±–ª–∏—á–Ω—ã–π –º–∞–∫–µ—Ç –Ω–∞–π–¥–µ–Ω")
        assert 'fas fa-file-pdf' in response.content.decode()
        print("    ‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print(f"    ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")

def test_session_persistence(client, user):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ –≤ —Å–µ—Å—Å–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ –≤ —Å–µ—Å—Å–∏–∏")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    print("\nüìÑ –¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
    response = client.get(reverse('documents:list') + '?view_mode=table')
    response2 = client.get(reverse('documents:list'))
    if response2.status_code == 200:
        if hasattr(response2, 'context') and response2.context:
            view_mode = response2.context.get('view_mode', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
            print(f"    ‚úÖ –†–µ–∂–∏–º –∏–∑ —Å–µ—Å—Å–∏–∏: {view_mode}")
            if view_mode == 'table':
                print(f"    ‚úÖ –°–µ—Å—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"    ‚ùå –°–µ—Å—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∂–∏–º")
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
    print("\nüîç –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞:")
    response = client.get(reverse('analysis:list') + '?view_mode=table')
    response2 = client.get(reverse('analysis:list'))
    if response2.status_code == 200:
        if hasattr(response2, 'context') and response2.context:
            view_mode = response2.context.get('view_mode', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
            print(f"    ‚úÖ –†–µ–∂–∏–º –∏–∑ —Å–µ—Å—Å–∏–∏: {view_mode}")
            if view_mode == 'table':
                print(f"    ‚úÖ –°–µ—Å—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"    ‚ùå –°–µ—Å—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∂–∏–º")
    
    # –¢–µ—Å—Ç –æ—Ç—á–µ—Ç–æ–≤
    print("\nüìä –¢–µ—Å—Ç –æ—Ç—á–µ—Ç–æ–≤:")
    response = client.get(reverse('reports:list') + '?view_mode=table')
    response2 = client.get(reverse('reports:list'))
    if response2.status_code == 200:
        if hasattr(response2, 'context') and response2.context:
            view_mode = response2.context.get('view_mode', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
            print(f"    ‚úÖ –†–µ–∂–∏–º –∏–∑ —Å–µ—Å—Å–∏–∏: {view_mode}")
            if view_mode == 'table':
                print(f"    ‚úÖ –°–µ—Å—Å–∏—è –æ—Ç—á–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"    ‚ùå –°–µ—Å—Å–∏—è –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∂–∏–º")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ WARA")
    print("=" * 70)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        user = create_test_data()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        client = Client()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª
        test_documents_view_modes(client, user)
        test_analysis_view_modes(client, user)
        test_reports_view_modes(client, user)
        test_session_persistence(client, user)
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("=" * 70)
        print("‚úÖ –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        print("‚úÖ –ö–∞—Ä—Ç–æ—á–Ω—ã–π –∏ —Ç–∞–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –°–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º")
        print("‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∂–∏–º–∞–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
