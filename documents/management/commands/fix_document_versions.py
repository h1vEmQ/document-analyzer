from django.core.management.base import BaseCommand
from django.db.models import Q
from documents.models import Document


class Command(BaseCommand):
    help = '–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–ª–∞–≥–∏ is_latest_version –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        
        if dry_run:
            self.stdout.write(self.style.WARNING('–†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (dry-run)'))
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ—Ä–Ω–µ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–±–µ–∑ parent_document)
        root_documents = Document.objects.filter(parent_document__isnull=True)
        
        fixed_count = 0
        total_duplicates = 0
        
        for root_doc in root_documents:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–µ—Ä—Å–∏–∏ —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            all_versions = Document.objects.filter(
                Q(id=root_doc.id) | Q(parent_document=root_doc.id)
            ).order_by('upload_date')
            
            if all_versions.count() <= 1:
                continue  # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –≤–µ—Ä—Å–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                
            # –ù–∞—Ö–æ–¥–∏–º –≤–µ—Ä—Å–∏–∏ —Å is_latest_version=True
            latest_versions = all_versions.filter(is_latest_version=True)
            
            if latest_versions.count() > 1:
                total_duplicates += latest_versions.count() - 1
                
                self.stdout.write(
                    f'–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ "{root_doc.title}" (ID: {root_doc.id}):'
                )
                
                for version in latest_versions:
                    self.stdout.write(
                        f'  - –í–µ—Ä—Å–∏—è {version.version} (ID: {version.id}) - {version.upload_date}'
                    )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –ø–æ –¥–∞—Ç–µ
                actual_latest = all_versions.order_by('-upload_date').first()
                
                self.stdout.write(
                    f'  –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è –ø–æ –¥–∞—Ç–µ: {actual_latest.version} (ID: {actual_latest.id})'
                )
                
                if not dry_run:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏
                    all_versions.update(is_latest_version=False)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
                    actual_latest.is_latest_version = True
                    actual_latest.save()
                    
                    self.stdout.write(
                        self.style.SUCCESS(f'  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ')
                    )
                else:
                    self.stdout.write(
                        self.style.WARNING(f'  üîç –ë—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ')
                    )
                
                fixed_count += 1
        
        if dry_run:
            self.stdout.write(
                self.style.WARNING(
                    f'\n–ù–∞–π–¥–µ–Ω–æ {fixed_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ '
                    f'({total_duplicates} –ª–∏—à–Ω–∏—Ö —Ñ–ª–∞–≥–æ–≤ is_latest_version)'
                )
            )
            self.stdout.write(
                '–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ --dry-run –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
            )
        else:
            self.stdout.write(
                self.style.SUCCESS(
                    f'\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ '
                    f'({total_duplicates} –ª–∏—à–Ω–∏—Ö —Ñ–ª–∞–≥–æ–≤ is_latest_version)'
                )
            )
