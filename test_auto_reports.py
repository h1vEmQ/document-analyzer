#!/usr/bin/env python
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'wara_project.settings')
django.setup()

from django.test import Client
from django.contrib.auth import get_user_model
from django.core.files.uploadedfile import SimpleUploadedFile
from documents.models import Document as DjangoDocument
from analysis.models import Comparison
from reports.models import Report
from reports.services import AutoReportGeneratorService, DOCXReportGeneratorService
from docx import Document as DocxDocument
from io import BytesIO

User = get_user_model()

def create_test_docx_v1():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ .docx —Ñ–∞–π–ª–∞"""
    doc = DocxDocument()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    doc.add_heading('–û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö - –í–µ—Ä—Å–∏—è 1', 0)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ
    doc.add_paragraph('–≠—Ç–æ –ø–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª.')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª
    doc.add_heading('–†–∞–∑–¥–µ–ª 1: –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏', level=1)
    doc.add_paragraph('–û–±—â–∏–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂ —Å–æ—Å—Ç–∞–≤–∏–ª 100 000 —Ä—É–±–ª–µ–π.')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    doc.add_heading('–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥–∞–∂', level=2)
    table = doc.add_table(rows=3, cols=3)
    table.style = 'Table Grid'
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    table.cell(0, 0).text = '–ü—Ä–æ–¥—É–∫—Ç'
    table.cell(0, 1).text = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
    table.cell(0, 2).text = '–°—É–º–º–∞'
    
    table.cell(1, 0).text = '–¢–æ–≤–∞—Ä –ê'
    table.cell(1, 1).text = '10'
    table.cell(1, 2).text = '50 000'
    
    table.cell(2, 0).text = '–¢–æ–≤–∞—Ä –ë'
    table.cell(2, 1).text = '5'
    table.cell(2, 2).text = '50 000'
    
    # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–∏–Ω —Ä–∞–∑–¥–µ–ª
    doc.add_heading('–†–∞–∑–¥–µ–ª 2: –í—ã–≤–æ–¥—ã', level=1)
    doc.add_paragraph('–ü—Ä–æ–¥–∞–∂–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–ª–∞–Ω—É.')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    
    return buffer.getvalue()

def create_test_docx_v2():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –≤–µ—Ä—Å–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ .docx —Ñ–∞–π–ª–∞ (—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏)"""
    doc = DocxDocument()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    doc.add_heading('–û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö - –í–µ—Ä—Å–∏—è 2', 0)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ (–∏–∑–º–µ–Ω–µ–Ω)
    doc.add_paragraph('–≠—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª.')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª
    doc.add_heading('–†–∞–∑–¥–µ–ª 1: –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏', level=1)
    doc.add_paragraph('–û–±—â–∏–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂ —Å–æ—Å—Ç–∞–≤–∏–ª 120 000 —Ä—É–±–ª–µ–π.')  # –ò–∑–º–µ–Ω–µ–Ω–æ
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É (–∏–∑–º–µ–Ω–µ–Ω–∞)
    doc.add_heading('–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥–∞–∂', level=2)
    table = doc.add_table(rows=4, cols=3)  # –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞
    table.style = 'Table Grid'
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    table.cell(0, 0).text = '–ü—Ä–æ–¥—É–∫—Ç'
    table.cell(0, 1).text = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
    table.cell(0, 2).text = '–°—É–º–º–∞'
    
    table.cell(1, 0).text = '–¢–æ–≤–∞—Ä –ê'
    table.cell(1, 1).text = '12'  # –ò–∑–º–µ–Ω–µ–Ω–æ
    table.cell(1, 2).text = '60 000'  # –ò–∑–º–µ–Ω–µ–Ω–æ
    
    table.cell(2, 0).text = '–¢–æ–≤–∞—Ä –ë'
    table.cell(2, 1).text = '5'
    table.cell(2, 2).text = '50 000'
    
    table.cell(3, 0).text = '–¢–æ–≤–∞—Ä –í'  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    table.cell(3, 1).text = '2'  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    table.cell(3, 2).text = '10 000'  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    
    # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–∏–Ω —Ä–∞–∑–¥–µ–ª (–∏–∑–º–µ–Ω–µ–Ω)
    doc.add_heading('–†–∞–∑–¥–µ–ª 2: –í—ã–≤–æ–¥—ã', level=1)
    doc.add_paragraph('–ü—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ø–ª–∞–Ω –Ω–∞ 20%.')  # –ò–∑–º–µ–Ω–µ–Ω–æ
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª
    doc.add_heading('–†–∞–∑–¥–µ–ª 3: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', level=1)
    doc.add_paragraph('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –ê.')  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    
    return buffer.getvalue()

def test_auto_reports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, created = User.objects.get_or_create(
        username='testuser',
        defaults={
            'email': 'test@example.com',
            'first_name': '–¢–µ—Å—Ç',
            'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'role': 'user'
        }
    )
    if created:
        user.set_password('testpass123')
        user.save()
        print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
    else:
        print(f"    ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ .docx —Ñ–∞–π–ª—ã
    print("\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    docx_v1_content = create_test_docx_v1()
    docx_v2_content = create_test_docx_v2()
    
    test_file_v1 = SimpleUploadedFile(
        "test_report_v1.docx",
        docx_v1_content,
        content_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )
    test_file_v2 = SimpleUploadedFile(
        "test_report_v2.docx",
        docx_v2_content,
        content_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )
    
    print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª v1: {test_file_v1.name} ({len(docx_v1_content)} –±–∞–π—Ç)")
    print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª v2: {test_file_v2.name} ({len(docx_v2_content)} –±–∞–π—Ç)")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    client = Client()
    client.force_login(user)
    
    # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    print("\nüîç –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    response1 = client.post('/upload/', {
        'title': '–û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö v1',
        'file': test_file_v1
    })
    
    if response1.status_code == 302:
        print("    ‚úÖ –ü–µ—Ä–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")
    else:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {response1.status_code}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ç–æ—Ä–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
    response2 = client.post('/upload/', {
        'title': '–û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö v2',
        'file': test_file_v2
    })
    
    if response2.status_code == 302:
        print("    ‚úÖ –í—Ç–æ—Ä–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")
    else:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {response2.status_code}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    documents = DjangoDocument.objects.filter(user=user).order_by('-upload_date')[:2]
    if len(documents) < 2:
        print("    ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return
    
    doc1, doc2 = documents[0], documents[1]
    print(f"    üìù –î–æ–∫—É–º–µ–Ω—Ç 1: {doc1.title} (ID: {doc1.id})")
    print(f"    üìù –î–æ–∫—É–º–µ–Ω—Ç 2: {doc2.title} (ID: {doc2.id})")
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç—á–µ—Ç–æ–≤)
    print("\nüîç –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç—á–µ—Ç–æ–≤")
    
    response = client.post('/analysis/create/', {
        'title': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã —Ç–µ—Å—Ç',
        'base_document': doc1.id,
        'compared_document': doc2.id
    })
    
    if response.status_code == 302:  # –†–µ–¥–∏—Ä–µ–∫—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
        print("    ‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        latest_comparison = Comparison.objects.filter(user=user).order_by('-created_date').first()
        if latest_comparison:
            print(f"    üìù –°—Ä–∞–≤–Ω–µ–Ω–∏–µ ID: {latest_comparison.id}")
            print(f"    üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {latest_comparison.title}")
            print(f"    üìù –°—Ç–∞—Ç—É—Å: {latest_comparison.status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if latest_comparison.status == 'completed':
                print("    ‚úÖ –ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
                auto_reports = Report.objects.filter(
                    comparison=latest_comparison,
                    title__contains='Auto-generated'
                ).order_by('generated_date')
                
                print(f"    üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {auto_reports.count()}")
                
                for report in auto_reports:
                    print(f"        - {report.title} (ID: {report.id}, –§–æ—Ä–º–∞—Ç: {report.format}, –°—Ç–∞—Ç—É—Å: {report.status})")
                    if report.file:
                        print(f"          –§–∞–π–ª: {report.file.name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PDF –∏ DOCX –æ—Ç—á–µ—Ç–æ–≤
                pdf_reports = auto_reports.filter(format='pdf')
                docx_reports = auto_reports.filter(format='docx')
                
                if pdf_reports.exists():
                    print("    ‚úÖ PDF –æ—Ç—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω")
                else:
                    print("    ‚ùå PDF –æ—Ç—á–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
                
                if docx_reports.exists():
                    print("    ‚úÖ DOCX –æ—Ç—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω")
                else:
                    print("    ‚ùå DOCX –æ—Ç—á–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
            else:
                print(f"    ‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω (—Å—Ç–∞—Ç—É—Å: {latest_comparison.status})")
        else:
            print("    ‚ùå –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    else:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        if hasattr(response, 'content'):
            print(f"    üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {response.content.decode()[:200]}...")
    
    # –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DOCX –æ—Ç—á–µ—Ç–æ–≤
    print("\nüîç –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DOCX –æ—Ç—á–µ—Ç–æ–≤")
    
    latest_comparison = Comparison.objects.filter(user=user).order_by('-created_date').first()
    if latest_comparison and latest_comparison.status == 'completed':
        try:
            docx_service = DOCXReportGeneratorService()
            docx_content = docx_service.generate_report(latest_comparison)
            
            print(f"    ‚úÖ DOCX –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            print(f"    üìÑ –†–∞–∑–º–µ—Ä DOCX —Ñ–∞–π–ª–∞: {len(docx_content)} –±–∞–π—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π DOCX —Ñ–∞–π–ª
            if docx_content.startswith(b'PK'):
                print("    ‚úÖ –§–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º DOCX (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å PK)")
            else:
                print("    ‚ùå –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º DOCX")
            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DOCX –æ—Ç—á–µ—Ç–∞: {e}")
    else:
        print("    ‚è≠Ô∏è –¢–µ—Å—Ç DOCX –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)")
    
    # –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
    print("\nüîç –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤")
    
    if latest_comparison and latest_comparison.status == 'completed':
        try:
            auto_service = AutoReportGeneratorService()
            results = auto_service.generate_auto_reports(latest_comparison)
            
            print(f"    ‚úÖ –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            print(f"    üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")
            
            if results.get('pdf_report'):
                print("    ‚úÖ PDF –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å")
            if results.get('docx_report'):
                print("    ‚úÖ DOCX –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å")
            
            if results.get('errors'):
                print("    ‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
                for error in results['errors']:
                    print(f"        - {error}")
            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {e}")
    else:
        print("    ‚è≠Ô∏è –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)")
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Ç—á–µ—Ç–æ–≤
    print("\nüîç –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Ç—á–µ—Ç–æ–≤")
    
    response = client.get('/reports/')
    if response.status_code == 200:
        print("    ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        content = response.content.decode()
        auto_reports_count = Report.objects.filter(
            user=user,
            title__contains='Auto-generated'
        ).count()
        
        if auto_reports_count > 0:
            print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {auto_reports_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if 'Auto-generated' in content:
                print("    ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            else:
                print("    ‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        else:
            print("    ‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—á–µ—Ç–æ–≤: {response.status_code}")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("=" * 60)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_reports = Report.objects.filter(user=user).count()
    auto_reports = Report.objects.filter(user=user, title__contains='Auto-generated').count()
    pdf_reports = Report.objects.filter(user=user, format='pdf').count()
    docx_reports = Report.objects.filter(user=user, format='docx').count()
    
    print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"    üìÑ –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {total_reports}")
    print(f"    ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {auto_reports}")
    print(f"    üìã PDF –æ—Ç—á–µ—Ç–æ–≤: {pdf_reports}")
    print(f"    üìù DOCX –æ—Ç—á–µ—Ç–æ–≤: {docx_reports}")
    
    if auto_reports > 0:
        success_rate = (auto_reports / max(total_reports, 1)) * 100
        print(f"    üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {success_rate:.1f}%")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        test_auto_reports()
        return True
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
