from django.contrib import admin
from django.contrib.auth import get_user_model
from django.utils.html import format_html
from django import forms
from .models import ApplicationSettings

User = get_user_model()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
from .admin_site import admin_site


class ApplicationSettingsForm(forms.ModelForm):
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    class Meta:
        model = ApplicationSettings
        fields = '__all__'
    
    def __init__(self, *args, **kwargs):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user –∏–∑ kwargs –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        self.user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª–µ –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ Ollama
            from analysis.ollama_service import OllamaService
            ollama_service = OllamaService()
            
            if ollama_service.is_available():
                available_models = ollama_service.get_available_models()
                
                # –°–æ–∑–¥–∞–µ–º choices –¥–ª—è –ø–æ–ª—è
                model_choices = []
                for model in available_models:
                    # –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ —á–∏—Ç–∞–µ–º—ã–µ
                    model_display_names = {
                        'llama3': 'Llama 3',
                        'llama3.1': 'Llama 3.1',
                        'llama3:latest': 'Llama 3',
                        'llama3.1:latest': 'Llama 3.1',
                        'mistral': 'Mistral',
                        'mistral:latest': 'Mistral',
                        'codellama': 'Code Llama',
                        'codellama:latest': 'Code Llama',
                        'deepseek-r1:7b': 'DeepSeek R1 7B',
                        'deepseek-r1:8b': 'DeepSeek R1 8B',
                    }
                    display_name = model_display_names.get(model, model)
                    model_choices.append((model, display_name))
                
                # –í—Å–µ–≥–¥–∞ –∑–∞–º–µ–Ω—è–µ–º CharField –Ω–∞ ChoiceField
                if model_choices:
                    self.fields['default_neural_network_model'] = forms.ChoiceField(
                        choices=model_choices,
                        label='–ú–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
                        help_text='–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'
                    )
                else:
                    # –ï—Å–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ —Å –ø—É—Å—Ç—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                    self.fields['default_neural_network_model'] = forms.ChoiceField(
                        choices=[('', '–ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')],
                        label='–ú–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
                        help_text='–ú–æ–¥–µ–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ Ollama. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥–µ–ª–∏ –≤ Ollama –¥–ª—è –≤—ã–±–æ—Ä–∞.',
                        required=False
                    )
            else:
                # –ï—Å–ª–∏ Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                self.fields['default_neural_network_model'] = forms.ChoiceField(
                    choices=[('', 'Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')],
                    label='–ú–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
                    help_text='Ollama —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Ollama –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏.',
                    required=False
                )
                
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
            self.fields['default_neural_network_model'] = forms.ChoiceField(
                choices=[('', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π')],
                label='–ú–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
                help_text=f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {str(e)}',
                required=False
            )


@admin.register(ApplicationSettings)
class ApplicationSettingsAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω-–∫–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Ñ–æ—Ä–º—É
    form = ApplicationSettingsForm
    
    def get_form(self, request, obj=None, **kwargs):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ user –≤ —Ñ–æ—Ä–º—É"""
        form = super().get_form(request, obj, **kwargs)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è —Ñ–æ—Ä–º—ã, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–¥–∞–µ—Ç user
        class FormWithUser(form):
            def __init__(self, *args, **kwargs):
                kwargs['user'] = request.user
                super().__init__(*args, **kwargs)
        
        return FormWithUser
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
    list_display = [
        'app_name',
        'auto_analysis_status',
        'auto_reports_status',
        'email_notifications_status',
        'updated_at',
        'updated_by_display'
    ]
    
    # –ü–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
    readonly_fields = ['created_at', 'updated_at', 'updated_by']
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('app_name', 'app_description')
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', {
            'fields': ('max_file_size', 'allowed_file_types'),
            'classes': ('collapse',)
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞', {
            'fields': ('auto_analysis_enabled', 'analysis_timeout', 'default_neural_network_model'),
            'classes': ('collapse',)
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤', {
            'fields': ('auto_reports_enabled', 'default_report_format'),
            'classes': ('collapse',)
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', {
            'fields': ('email_notifications_enabled', 'notification_email'),
            'classes': ('collapse',)
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', {
            'fields': ('session_timeout', 'max_login_attempts'),
            'classes': ('collapse',)
        }),
        ('–ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at', 'updated_at', 'updated_by'),
            'classes': ('collapse',)
        }),
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–µ–π
    def auto_analysis_status(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        if obj.auto_analysis_enabled:
            return format_html('<span style="color: green;">‚úì –í–∫–ª—é—á–µ–Ω</span>')
        return format_html('<span style="color: red;">‚úó –í—ã–∫–ª—é—á–µ–Ω</span>')
    auto_analysis_status.short_description = '–ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑'
    
    def auto_reports_status(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        if obj.auto_reports_enabled:
            return format_html('<span style="color: green;">‚úì –í–∫–ª—é—á–µ–Ω</span>')
        return format_html('<span style="color: red;">‚úó –í—ã–∫–ª—é—á–µ–Ω</span>')
    auto_reports_status.short_description = '–ê–≤—Ç–æ–æ—Ç—á–µ—Ç—ã'
    
    def email_notifications_status(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if obj.email_notifications_enabled:
            return format_html('<span style="color: green;">‚úì –í–∫–ª—é—á–µ–Ω—ã</span>')
        return format_html('<span style="color: red;">‚úó –í—ã–∫–ª—é—á–µ–Ω—ã</span>')
    email_notifications_status.short_description = 'Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    
    def updated_by_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±–Ω–æ–≤–∏–≤—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        if obj.updated_by:
            return obj.updated_by.username
        return '-'
    updated_by_display.short_description = '–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º save –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def save_model(self, request, obj, form, change):
        obj.updated_by = request.user
        super().save_model(request, obj, form, change)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    def has_add_permission(self, request):
        """–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–∫)"""
        return not ApplicationSettings.objects.exists()
    
    def changelist_view(self, request, extra_context=None):
        """–ö–∞—Å—Ç–æ–º–Ω—ã–π –≤–∏–¥ —Å–ø–∏—Å–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        extra_context = extra_context or {}
        settings = ApplicationSettings.get_settings()
        extra_context['settings'] = settings
        return super().changelist_view(request, extra_context)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    actions = ['reset_to_defaults']
    
    def reset_to_defaults(self, request, queryset):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        for settings in queryset:
            settings.app_name = 'üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'
            settings.app_description = '–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'
            settings.max_file_size = 10485760
            settings.allowed_file_types = 'docx,pdf'
            settings.auto_analysis_enabled = True
            settings.analysis_timeout = 300
            settings.default_neural_network_model = 'llama3'
            settings.auto_reports_enabled = True
            settings.default_report_format = 'pdf'
            settings.email_notifications_enabled = False
            settings.notification_email = ''
            settings.session_timeout = 3600
            settings.max_login_attempts = 5
            settings.updated_by = request.user
            settings.save()
        
        self.message_user(
            request,
            f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è {queryset.count()} –∑–∞–ø–∏—Å–∏(–µ–π).'
        )
    reset_to_defaults.short_description = '–°–±—Ä–æ—Å–∏—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'


# –ö–∞—Å—Ç–æ–º–Ω–∞—è –∞–¥–º–∏–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
from django.contrib.admin.views.main import ChangeList
from django.shortcuts import render
from django.urls import path
from django.contrib.admin import AdminSite


class ApplicationSettingsChangeList(ChangeList):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['settings'] = ApplicationSettings.get_settings()
        return context


# –ö–∞—Å—Ç–æ–º–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è admin_site.py

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
from .admin_site import admin_site