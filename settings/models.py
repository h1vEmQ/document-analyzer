from django.db import models
from django.contrib.auth import get_user_model

User = get_user_model()


class ApplicationSettings(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_name = models.CharField(
        max_length=100, 
        default='üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
    )
    app_description = models.TextField(
        default='–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
        verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    max_file_size = models.PositiveIntegerField(
        default=10485760,  # 10MB
        verbose_name='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–±–∞–π—Ç—ã)'
    )
    allowed_file_types = models.TextField(
        default='docx,pdf',
        verbose_name='–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
    auto_analysis_enabled = models.BooleanField(
        default=True,
        verbose_name='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–µ–Ω'
    )
    analysis_timeout = models.PositiveIntegerField(
        default=300,  # 5 –º–∏–Ω—É—Ç
        verbose_name='–¢–∞–π–º–∞—É—Ç –∞–Ω–∞–ª–∏–∑–∞ (—Å–µ–∫—É–Ω–¥—ã)'
    )
    default_neural_network_model = models.CharField(
        max_length=100,
        default='llama3',
        verbose_name='–ú–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
    auto_reports_enabled = models.BooleanField(
        default=True,
        verbose_name='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞'
    )
    default_report_format = models.CharField(
        max_length=10,
        choices=[('pdf', 'PDF'), ('docx', 'DOCX')],
        default='pdf',
        verbose_name='–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    items_per_page = models.PositiveIntegerField(
        default=10,
        verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    email_notifications_enabled = models.BooleanField(
        default=False,
        verbose_name='Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã'
    )
    notification_email = models.EmailField(
        blank=True,
        verbose_name='Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    session_timeout = models.PositiveIntegerField(
        default=3600,  # 1 —á–∞—Å
        verbose_name='–¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏ (—Å–µ–∫—É–Ω–¥—ã)'
    )
    max_login_attempts = models.PositiveIntegerField(
        default=5,
        verbose_name='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Microsoft Graph
    microsoft_graph_enabled = models.BooleanField(
        default=False,
        verbose_name='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Microsoft Graph –≤–∫–ª—é—á–µ–Ω–∞'
    )
    microsoft_tenant_id = models.CharField(
        max_length=100,
        blank=True,
        verbose_name='ID –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ Microsoft (Tenant ID)'
    )
    microsoft_client_id = models.CharField(
        max_length=100,
        blank=True,
        verbose_name='ID –∫–ª–∏–µ–Ω—Ç–∞ Microsoft (Client ID)'
    )
    microsoft_client_secret = models.CharField(
        max_length=500,
        blank=True,
        verbose_name='–°–µ–∫—Ä–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ Microsoft (Client Secret)'
    )
    microsoft_redirect_uri = models.URLField(
        blank=True,
        default='http://localhost:8000/auth/microsoft/callback/',
        verbose_name='URI –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è Microsoft'
    )
    microsoft_scope = models.TextField(
        default='https://graph.microsoft.com/Files.Read https://graph.microsoft.com/Sites.Read.All',
        verbose_name='–û–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞ Microsoft (Scope)'
    )
    microsoft_site_id = models.CharField(
        max_length=200,
        blank=True,
        verbose_name='ID —Å–∞–π—Ç–∞ SharePoint'
    )
    microsoft_drive_id = models.CharField(
        max_length=200,
        blank=True,
        verbose_name='ID –¥–∏—Å–∫–∞ SharePoint'
    )
    microsoft_folder_path = models.CharField(
        max_length=500,
        blank=True,
        default='/Documents',
        verbose_name='–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –≤ SharePoint'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Microsoft Active Directory SSO
    microsoft_ad_sso_enabled = models.BooleanField(
        default=False,
        verbose_name='Microsoft Active Directory SSO –≤–∫–ª—é—á–µ–Ω'
    )
    microsoft_ad_sso_tenant_id = models.CharField(
        max_length=100,
        blank=True,
        verbose_name='ID –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ AD (Tenant ID)'
    )
    microsoft_ad_sso_client_id = models.CharField(
        max_length=100,
        blank=True,
        verbose_name='ID –∫–ª–∏–µ–Ω—Ç–∞ AD (Client ID)'
    )
    microsoft_ad_sso_client_secret = models.CharField(
        max_length=500,
        blank=True,
        verbose_name='–°–µ–∫—Ä–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ AD (Client Secret)'
    )
    microsoft_ad_sso_redirect_uri = models.URLField(
        blank=True,
        default='http://localhost:8000/auth/microsoft/sso/callback/',
        verbose_name='URI –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è AD SSO'
    )
    microsoft_ad_sso_scope = models.TextField(
        default='https://graph.microsoft.com/User.Read https://graph.microsoft.com/Group.Read.All',
        verbose_name='–û–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞ AD SSO (Scope)'
    )
    microsoft_ad_sso_domain = models.CharField(
        max_length=200,
        blank=True,
        verbose_name='–î–æ–º–µ–Ω Active Directory'
    )
    
    # –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–°–æ–∑–¥–∞–Ω–æ')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='–û–±–Ω–æ–≤–ª–µ–Ω–æ')
    updated_by = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name='–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
    )
    
    class Meta:
        verbose_name = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
        verbose_name_plural = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
    
    def __str__(self):
        return f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ {self.app_name}'
    
    def save(self, *args, **kwargs):
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not self.pk and ApplicationSettings.objects.exists():
            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö
            existing = ApplicationSettings.objects.first()
            for field in self._meta.fields:
                if field.name not in ['id', 'created_at']:
                    setattr(existing, field.name, getattr(self, field.name))
            existing.save()
            return existing
        return super().save(*args, **kwargs)
    
    @classmethod
    def get_settings(cls):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å–æ–∑–¥–∞—Ç—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"""
        settings, created = cls.objects.get_or_create(
            defaults={
                'app_name': 'üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
                'app_description': '–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
                'items_per_page': 10,
                'default_neural_network_model': 'llama3',
                'microsoft_graph_enabled': False,
                'microsoft_tenant_id': '',
                'microsoft_client_id': '',
                'microsoft_client_secret': '',
                'microsoft_redirect_uri': 'http://localhost:8000/auth/microsoft/callback/',
                'microsoft_scope': 'https://graph.microsoft.com/Files.Read https://graph.microsoft.com/Sites.Read.All',
                'microsoft_site_id': '',
                'microsoft_drive_id': '',
                'microsoft_folder_path': '/Documents',
                'microsoft_ad_sso_enabled': False,
                'microsoft_ad_sso_tenant_id': '',
                'microsoft_ad_sso_client_id': '',
                'microsoft_ad_sso_client_secret': '',
                'microsoft_ad_sso_redirect_uri': 'http://localhost:8000/auth/microsoft/sso/callback/',
                'microsoft_ad_sso_scope': 'https://graph.microsoft.com/User.Read https://graph.microsoft.com/Group.Read.All',
                'microsoft_ad_sso_domain': '',
            }
        )
        return settings


class MicrosoftGraphToken(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞ Microsoft Graph"""
    
    user = models.OneToOneField(
        User,
        on_delete=models.CASCADE,
        verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    )
    access_token = models.TextField(
        verbose_name='–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞'
    )
    refresh_token = models.TextField(
        blank=True,
        verbose_name='–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
    )
    token_type = models.CharField(
        max_length=50,
        default='Bearer',
        verbose_name='–¢–∏–ø —Ç–æ–∫–µ–Ω–∞'
    )
    expires_at = models.DateTimeField(
        verbose_name='–ò—Å—Ç–µ–∫–∞–µ—Ç'
    )
    scope = models.TextField(
        verbose_name='–û–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞'
    )
    
    # –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–°–æ–∑–¥–∞–Ω–æ')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='–û–±–Ω–æ–≤–ª–µ–Ω–æ')
    
    class Meta:
        verbose_name = '–¢–æ–∫–µ–Ω Microsoft Graph'
        verbose_name_plural = '–¢–æ–∫–µ–Ω—ã Microsoft Graph'
    
    def __str__(self):
        return f'–¢–æ–∫–µ–Ω –¥–ª—è {self.user.username}'
    
    @property
    def is_expired(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω"""
        from django.utils import timezone
        return timezone.now() >= self.expires_at
    
    def save(self, *args, **kwargs):
        from django.utils import timezone
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –∏—Å—Ç–µ–∫—à–∏–º
        if not hasattr(self, 'expires_at') or self.expires_at is None:
            self.expires_at = timezone.now() + timezone.timedelta(hours=1)
        return super().save(*args, **kwargs)


class ServerSettings(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    server_name = models.CharField(
        max_length=100,
        default='üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ Server',
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞'
    )
    
    server_description = models.TextField(
        default='–°–µ—Ä–≤–µ—Ä —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
        verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    max_concurrent_requests = models.PositiveIntegerField(
        default=100,
        verbose_name='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤'
    )
    
    request_timeout = models.PositiveIntegerField(
        default=30,
        verbose_name='–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–µ–∫—É–Ω–¥—ã)'
    )
    
    max_memory_usage = models.PositiveIntegerField(
        default=2048,
        verbose_name='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (–ú–ë)'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level = models.CharField(
        max_length=10,
        choices=[
            ('DEBUG', 'DEBUG'),
            ('INFO', 'INFO'),
            ('WARNING', 'WARNING'),
            ('ERROR', 'ERROR'),
            ('CRITICAL', 'CRITICAL'),
        ],
        default='INFO',
        verbose_name='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è'
    )
    
    log_retention_days = models.PositiveIntegerField(
        default=30,
        verbose_name='–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ (–¥–Ω–∏)'
    )
    
    enable_access_log = models.BooleanField(
        default=True,
        verbose_name='–í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    enable_cache = models.BooleanField(
        default=True,
        verbose_name='–í–∫–ª—é—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ'
    )
    
    cache_timeout = models.PositiveIntegerField(
        default=300,
        verbose_name='–¢–∞–π–º–∞—É—Ç –∫—ç—à–∞ (—Å–µ–∫—É–Ω–¥—ã)'
    )
    
    max_cache_size = models.PositiveIntegerField(
        default=100,
        verbose_name='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ (–ú–ë)'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    enable_rate_limiting = models.BooleanField(
        default=True,
        verbose_name='–í–∫–ª—é—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤'
    )
    
    rate_limit_per_minute = models.PositiveIntegerField(
        default=60,
        verbose_name='–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É'
    )
    
    enable_csrf_protection = models.BooleanField(
        default=True,
        verbose_name='–í–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç CSRF'
    )
    
    session_cookie_secure = models.BooleanField(
        default=False,
        verbose_name='–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ cookies —Å–µ—Å—Å–∏–∏'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    enable_health_check = models.BooleanField(
        default=True,
        verbose_name='–í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞'
    )
    
    health_check_interval = models.PositiveIntegerField(
        default=60,
        verbose_name='–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è (—Å–µ–∫—É–Ω–¥—ã)'
    )
    
    enable_metrics = models.BooleanField(
        default=True,
        verbose_name='–í–∫–ª—é—á–∏—Ç—å —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    enable_backup = models.BooleanField(
        default=True,
        verbose_name='–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ'
    )
    
    backup_interval_hours = models.PositiveIntegerField(
        default=24,
        verbose_name='–ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (—á–∞—Å—ã)'
    )
    
    backup_retention_days = models.PositiveIntegerField(
        default=30,
        verbose_name='–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π (–¥–Ω–∏)'
    )
    
    # –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–°–æ–∑–¥–∞–Ω–æ')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='–û–±–Ω–æ–≤–ª–µ–Ω–æ')
    updated_by = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name='–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
    )
    
    class Meta:
        verbose_name = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞'
        verbose_name_plural = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞'
    
    def __str__(self):
        return f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ {self.server_name}'
    
    def save(self, *args, **kwargs):
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞
        if not self.pk and ServerSettings.objects.exists():
            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö
            existing = ServerSettings.objects.first()
            for field in self._meta.fields:
                if field.name not in ['id', 'created_at']:
                    setattr(existing, field.name, getattr(self, field.name))
            existing.save()
            return existing
        return super().save(*args, **kwargs)
    
    @classmethod
    def get_settings(cls):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ (—Å–æ–∑–¥–∞—Ç—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"""
        settings, created = cls.objects.get_or_create(
            defaults={
                'server_name': 'üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ Server',
                'server_description': '–°–µ—Ä–≤–µ—Ä —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
            }
        )
        return settings