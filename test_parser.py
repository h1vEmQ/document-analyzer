#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'wara_project.settings')
django.setup()

from documents.services import DocumentParserService, DocumentValidationService
from documents.models import Document
from django.core.files import File
import tempfile

def test_document_parser():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ WARA")
    print("=" * 50)
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    test_files = [f for f in os.listdir('/Users/wind/Documents/WARA') if f.startswith('test_document_') and f.endswith('.docx')]
    
    if not test_files:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    test_file = test_files[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π
    file_path = os.path.join('/Users/wind/Documents/WARA', test_file)
    
    print(f"üìÑ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
    print(f"üìè –†–∞–∑–º–µ—Ä: {os.path.getsize(file_path)} –±–∞–π—Ç")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞...")
    validation_service = DocumentValidationService()
    
    with open(file_path, 'rb') as f:
        from django.core.files.uploadedfile import SimpleUploadedFile
        uploaded_file = SimpleUploadedFile(
            name=test_file,
            content=f.read(),
            content_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        )
        
        validation_result = validation_service.validate_upload(uploaded_file)
        
        print(f"‚úÖ –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {validation_result['is_valid']}")
        if validation_result['errors']:
            print(f"‚ùå –û—à–∏–±–∫–∏: {validation_result['errors']}")
        if validation_result['warnings']:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {validation_result['warnings']}")
        
        print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: {validation_result['file_info']}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–î
    print("\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ë–î...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from users.models import User
    user = User.objects.first()
    if not user:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    with open(file_path, 'rb') as f:
        django_file = File(f, name=test_file)  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
        test_document = Document(
            title=f"–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç - {test_file}",
            filename=test_file,
            file=django_file,
            file_size=os.path.getsize(file_path),
            user=user
        )
        test_document.save()
        
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {test_document.id}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    
    try:
        parser_service = DocumentParserService()
        content_data = parser_service.parse_document(test_document)
        
        print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        print(f"üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(content_data['text_content'])} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìë –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–æ–≤: {len(content_data['sections'])}")
        print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: {len(content_data['tables'])}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if content_data['structure']:
            print(f"\nüèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∞–±–∑–∞—Ü–µ–≤: {content_data['structure']['total_paragraphs']}")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {content_data['structure']['total_tables']}")
            print(f"   ‚Ä¢ –£—Ä–æ–≤–Ω–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {content_data['structure']['heading_levels']}")
            print(f"   ‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {content_data['structure']['estimated_pages']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if content_data['metadata']:
            print(f"\nüìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
            for key, value in content_data['metadata'].items():
                if value:
                    print(f"   ‚Ä¢ {key}: {value}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª–æ–≤
        if content_data['sections']:
            print(f"\nüìë –ü–µ—Ä–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã:")
            for i, section in enumerate(content_data['sections'][:3]):
                print(f"   {i+1}. {section['title']} (—É—Ä–æ–≤–µ–Ω—å {section['level']})")
                print(f"      –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {section['content'][:100]}...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        if content_data['tables']:
            print(f"\nüìã –¢–∞–±–ª–∏—Ü—ã:")
            for i, table in enumerate(content_data['tables']):
                print(f"   {i+1}. {table['title']} ({table['row_count']} —Å—Ç—Ä–æ–∫, {table['col_count']} —Å—Ç–æ–ª–±—Ü–æ–≤)")
                if table['headers']:
                    print(f"      –ó–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(table['headers'])}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î...")
        parser_service.save_parsed_content(test_document, content_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        test_document.refresh_from_db()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞: {test_document.status}")
        print(f"‚úÖ –†–∞–∑–¥–µ–ª–æ–≤ –≤ –ë–î: {test_document.get_parsed_sections_count()}")
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü –≤ –ë–î: {test_document.get_parsed_tables_count()}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
        import traceback
        traceback.print_exc()
    
    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìÑ –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç ID: {test_document.id}")

if __name__ == '__main__':
    test_document_parser()
